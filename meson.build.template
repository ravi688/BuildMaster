# ------------------------------ DOCUMENTATION ---------------------------------
# Release build
# -------------------------
# $ meson setup --wipe <builddir> # wipe the build artifacts (like object files)
# $ meson setup <builddir> --reconfigure --buildtype=release # reconfigure the build directory for release build
# $ meson compile -C <builddir> # compile the project
#
# Debug build
# -------------------------
# $ meson setup --wipe <buildir> # wipe the build artifacts (like object files)
# $ meson setup <builddir> --reconfigure --buildtype=release # reconfigure the build directory for debug build
# $ meson compile -C <builddir> # compile the project
#
# Static Library
# -------------------------
# $ meson setup --wipe <buildir> # wipe the build artifacts (like object files)
# # NOTE: --buildtype=release or --buildtype=debug options can be added here  
# $ meson setup -C <builddir> --reconfigure --default-library=static # reconfigure the build directory for static library
# $ meson compile -C <builddir> # compile the project
# $ meson install -C <builddir> # install the static library
#
# Shared Library
# -------------------------
# $ meson setup --wipe <buildir> # whipe the build artifacts (like object files)
# # NOTE: --buildtype=release or --buildtype=debug options can be added here
# $ meson setup -C <builddir> --reconfigure --default-library=shared # reconfigure the build directory for shared library
# $ meson compile -C <builddir> # compile the project
# $ meson install -C <builddir> # install the shared library
#
# Artifact Installation Directories
# ---------------------------------
# Headers: /include/<ProjectNameInSmallCase>
# Static Libraries: /lib/lib<ProjectNameInSmallCase>.a-
# Shared Libraries: /bin/lib<ProjectNameInSmallCase>.dll
# PkgConfig (.pc) for static library: $PKG_CONFIG_PATH/<ProjectNameInSmallCase>_static.pc
# PkgConfig (.pc) for shared library: $PKG_CONFIG_PATH/<ProjectNameInSmallCase>_shared.pc
#
# -------------------------------- PROJECT CONFIGS -----------------------------

project($$project_name$$, 'c', 'cpp',
  version : '1.0.0',
  meson_version: '>=1.1',
  default_options : [
    'warning_level=3',
    'buildtype=debug',
    'c_std=c17',
    'cpp_std=c++20'
  ]
)

# Release Build Defines
release_defines = [
$$release_defines$$
] 

# Debug Build Defines
debug_defines = [
$$debug_defines$$
]

# Source files (common to all targets)
sources = files(
$$sources$$
)

# Include directories
inc = include_directories(
$$include_dirs$$
)

# Library Install Directory
lib_install_dir = get_option('libdir')/$$canonical_name$$

# Dependencies
dependencies = [
$$dependencies$$
]

# -------------------------------------------------------------------------------
# ------------------------------ FIXTURE ----------------------------------------

# Compiler configuration
add_project_arguments('-m64', language : 'c')
add_project_arguments('-m64', language : 'cpp')
# Linker configuration
add_project_link_arguments('-m64', language : 'c')
add_project_link_arguments('-m64', language : 'cpp')

# Build type specific defines
build_mode_defines = []
if get_option('buildtype') == 'release'
  add_project_arguments(release_defines, language : 'c')
  add_project_arguments(release_defines, language : 'cpp')
  build_mode_defines += release_defines
else
  add_project_arguments(debug_defines, language : 'c')
  add_project_arguments(debug_defines, language : 'cpp')
  build_mode_defines += debug_defines
endif

# pkg-config package installation
python = find_program('python')
# Try PKG_CONFIG_PATH first, typicallly it succeeds on MINGW64 (MSYS2)
result = run_command(python, '-c', 'import os; print(os.environ["PKG_CONFIG_PATH"])', check : false)
pkgconfig_install_path = ''
if result.returncode() == 0
  str = result.stdout()
  # Unix
  if str.startswith('/')
    pkgconfig_install_path = str.replace(';', ':').split(':')[0]
  # Windows
  else
    pkgconfig_install_path = str.split(';')[0]
  endif
endif
if pkgconfig_install_path == ''
  # Otherwise use pkg-config to query its lookup directories
  message('PKG_CONFIG_PATH seems to be empty, trying another method')
  result = run_command('pkg-config', '--variable', 'pc_path', 'pkg-config', check : false)
  if result.returncode() == 0
    str = result.stdout()
    if str.startswith('/')
      pkgconfig_install_path = str.replace(';', ':').split(':')[0]
    else
      pkgconfig_install_path = str.split(';')[0]
    endif
  # Finally if the above attempts fail, use 'libdir' value
  else
    pkgconfig_install_path = get_option('libdir')
  endif
endif
message('pkg config path: ' + pkgconfig_install_path)

#-------------------------------------------------------------------------------
#--------------------------------BUILD TARGETS----------------------------------
pkgmod = import('pkgconfig')

$$build_targets$$
#-------------------------------------------------------------------------------
#--------------------------------Header Intallation----------------------------------
# Header installation
$$install_subdirs$$
